{"version":3,"file":"static/js/685.44039d4e.chunk.js","mappings":"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CAEO,sCAAO4sB,CAAgCC,GAC1C,YAAoCpmE,IAAhComE,EACOvvC,EAAsBkC,yBAE1BlC,EAAsBC,sCACzBD,EAAsBwvC,oCAAoCD,GAClE,CAEO,4CAAOtvC,CAAsCwvC,GAChD,OAAQA,GACJ,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeC,MACf,EACA,IACA,IACA,EACA,EACAF,EACAA,GACA,GACR,IAAK,+BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeE,MACf,EACA,KACA,IACA,GACA,EACAH,EACA,iCACA,GACR,IAAK,gCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeE,MACf,EACA,KACA,IACA,GACA,EACAH,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,KACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeI,UACf,EACA,KACA,KACA,EACA,GACAL,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,IACA,KACA,EACA,GACAN,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeC,MACf,EACA,IACA,IACA,EACA,EACAF,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,IACA,KACA,EACA,GACAN,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,KACA,KACA,EACA,GACAN,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeG,IACf,EACA,KACA,MACA,EACA,GACAJ,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeM,SACf,EACA,KACA,KACA,EACA,GACAP,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,oCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeO,UACf,EACA,KACA,IACA,EACA,GACAR,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeQ,KACf,EACA,KACA,IACA,EACA,GACAT,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeS,KACf,EACA,KACA,KACA,EACA,GACAV,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeS,KACf,EACA,KACA,IACA,EACA,GACAV,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeI,UACf,EACA,KACA,KACA,EACA,GACAL,EACAA,GACA,GACR,IAAK,0BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeU,KACf,EACA,IACA,IACA,EACA,EACAX,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeU,KACf,EACA,IACA,IACA,EACA,EACAX,EACA,2BACA,GACR,IAAK,6BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACA,8BACA,GACR,IAAK,6BACD,OAAO,IAAIzvC,EACPjyB,EAAA2hE,eAAeK,IACf,EACA,MACA,MACA,EACA,GACAN,EACAA,GACA,GACR,IAAK,8BACD,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","sources":["../node_modules/bent/src/browser.js","../node_modules/bent/src/core.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts"],"sourcesContent":["'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DynamicGrammarInterfaces.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports.js\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.35.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {IStringDictionary} from \"../common/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n"],"names":["core","require","StatusError","Error","constructor","res","_len","arguments","length","params","Array","_key","buffer","super","captureStackTrace","this","name","message","statusMessage","statusCode","status","json","bind","text","arrayBuffer","Object","defineProperty","get","headers","key","value","entries","toLowerCase","module","exports","mkrequest","statusCodes","method","encoding","baseurl","async","_url","body","_headers","undefined","parsed","URL","username","Authorization","btoa","password","protocol","host","pathname","search","concat","ArrayBuffer","isView","JSON","stringify","Headers","resp","fetch","has","encodings","Set","args","forEach","arg","toUpperCase","msg","startsWith","add","isArray","code","size","AgentConfig","__exportStar","fs","__importStar","LogLevel_js_1","Contracts_js_1","logLevelFilter","LogLevel","None","privLogPath","privEnableConsoleOutput","privLogLevelFilter","logPath","path","Contracts","throwIfNullOrUndefined","openSync","enableConsoleOutput","enableOutput","onEvent","event","eventType","log","toString","writeFileSync","flag","Debug","console","debug","Info","info","Warning","warn","error","logFragments","eventTime","e","prop","hasOwnProperty","valueToLog","push","join","Exports_js_1","Exports_js_2","AudioStreamFormat_js_1","file","filename","audioSourceId","privStreams","privHeaderEnd","privId","createNoDashGuid","privEvents","EventSource","privSource","window","Blob","privFilename","privAudioFormatPromise","readHeader","format","turnOn","lastIndexOf","errorMsg","AudioSourceErrorEvent","Promise","reject","AudioSourceInitializingEvent","AudioSourceReadyEvent","id","attach","audioNodeId","AudioStreamNodeAttachingEvent","stream","upload","AudioStreamNodeAttachedEvent","resolve","detach","readEnded","AudioStreamNodeDetachedEvent","turnOff","read","close","streamId","isClosed","AudioSourceOffEvent","events","deviceInfo","then","result","bitspersample","bitsPerSample","channelcount","channels","connectivity","Unknown","manufacturer","model","samplerate","samplesPerSec","type","File","header","slice","headerResult","Deferred","processHeader","view","DataView","getWord","index","String","fromCharCode","getUint8","formatSize","getInt32","channelCount","getUint16","sampleRate","getUint32","pos","Math","max","maxHeaderSize","AudioStreamFormat","getWaveFormatPCM","reader","FileReader","onload","target","readAsArrayBuffer","h","byteOffset","byteLength","promise","onerror","AudioStreamNodeErrorEvent","ChunkedArrayBufferStream","avgBytesPerSec","chunk","processFile","buff","writeStreamChunk","isEnd","timeReceived","Date","now","ev","fileBuffer","c","Events","instance","MicAudioSource","privRecorder","deviceId","mediaStream","privOutputChunkSize","AUDIOFORMAT","privMediaStream","privIsClosing","privInitializeDeferral","createAudioContext","typedError","nav","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","constraints","successCallback","errorCallback","catch","next","active","audio","video","privContext","state","resume","reason","listen","destroyAudioContext","getMicrophoneLabel","label","Microphones","setProperty","AudioWorkletSourceURLPropertyName","setWorkletUrl","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getTracks","getSettings","deferred","enumerateDevices","devices","device","record","AudioStreamFormatImpl","getAudioContext","releaseMediaResources","hasClose","suspend","getDefaultInputFormat","Exports_1","stopInputOnRelease","privStopInputOnRelease","context","outputStream","waveStreamEncoder","RiffPcmEncoder","micInput","createMediaStreamSource","attachScriptProcessor","scriptNode","bufferSize","createScriptProcessor","audioSampleRate","onaudioprocess","inputFrame","inputBuffer","getChannelData","waveFrame","encode","connect","destination","privMediaResources","scriptProcessorNode","source","skipAudioWorklet","privSpeechProcessorScript","audioWorklet","blob","createObjectURL","addModule","workletNode","AudioWorkletNode","port","onmessage","data","err","disconnect","track","stop","url","ProxyInfo","proxyHostName","proxyPort","proxyUserName","proxyPassword","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","fromParameters","parameters","getProperty","PropertyId","SpeechServiceConnection_ProxyHostName","parseInt","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","fromRecognizerConfig","config","HostName","Port","UserName","Password","audioSource","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privAudioNode","privBytesPerSecond","offsetToSeek","bytesToSeek","round","i","retVal","BufferEntry","replay","shrinkBuffers","offset","findTimeAtOffset","startOffset","endOffset","serial","RestConfigBase","requestOptions","privDefaultRequestOptions","configParams","privDefaultParams","restErrors","privRestErrors","Accept","ignoreCache","timeout","authInvalidSubscriptionKey","authInvalidSubscriptionRegion","invalidArgs","invalidCreateJoinConversationResponse","invalidParticipantRequest","permissionDeniedConnect","permissionDeniedConversation","permissionDeniedParticipant","permissionDeniedSend","permissionDeniedStart","apiVersion","authorization","clientAppId","contentTypeKey","correlationId","languageCode","nickname","profanity","requestId","roomId","sessionToken","subscriptionKey","subscriptionRegion","token","bent_1","__importDefault","RestRequestType","ArgumentNullError","privHeaders","privIgnoreCache","extractHeaderValue","headerKey","headerValue","arr","trim","split","headerMap","line","parts","shift","options","setHeaders","request","uri","queryParams","responseReceivedDeferral","requestCommand","handleRestResponse","j","d","ok","statusText","Post","postData","default","sendRequest","Delete","send","keys","map","k","encodeURIComponent","WebsocketMessageAdapter_js_1","queryParameters","messageFormatter","proxyInfo","enableCompression","connectionId","privIsDisposed","privMessageFormatter","paramName","indexOf","val","headerName","privUri","privConnectionMessageAdapter","WebsocketMessageAdapter","dispose","isDisposed","open","net","tls","agent_base_1","https_proxy_agent_1","ws_1","HeaderNames_js_1","privConnectionEvents","privConnectionId","privConnectionState","ConnectionState","privEnableCompression","HeaderNames","ConnectionId","privLastErrorReceived","Disconnected","privConnectionEstablishDeferral","privCertificateValidatedDeferral","Connecting","WebSocket","forceNpmWebSocket","_protocol","_protocol2","perMessageDeflate","agent","getAgent","toLocaleLowerCase","privWebsocketClient","binaryType","privReceivingMessageQueue","Queue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","BackgroundEvent","ConnectionOpenResponse","ConnectionStartEvent","onopen","Connected","ConnectionEstablishedEvent","ConnectionErrorEvent","onclose","ConnectionClosedEvent","onClose","networkReceivedTime","toISOString","enqueueFromPromise","rawMessage","RawWebsocketMessage","MessageType","Binary","toConnectionMessage","connectionMessage","ConnectionMessageReceivedEvent","Text","messageSendStatusDeferral","messageSendDeferral","fromConnectionMessage","Message","sendStatusDeferral","dequeue","sendRawMessage","sendItem","ConnectionMessageSentEvent","isWebsocketOpen","payload","stack","closeReason","drainAndDispose","pendingSendItem","itemToSend","sendError","Agent","createConnection","GetProxyAgent","httpProxyOptions","Buffer","requestOCSP","socketPromise","servername","baseAgent","callback","socket","secureEndpoint","readyState","OPEN","modelImpl","intentName","toJsonString","iPrivConfig","set","AvatarSynthesisAdapter","SynthesisAdapterBase","authentication","connectionFactory","synthesizerConfig","avatarSynthesizer","avatarConfig","privAvatarSynthesizer","privSynthesizer","privAvatarConfig","setSynthesisContextSynthesisSection","privSynthesisContext","setSynthesisSection","setSpeechConfigSynthesisSection","_this$privAvatarConfi","_this$privAvatarConfi2","_this$privAvatarConfi3","_this$privAvatarConfi4","_this$privAvatarConfi5","_this$privAvatarConfi6","_this$privAvatarConfi7","_this$privAvatarConfi8","privSynthesizerConfig","synthesisVideoSection","bitrate","videoFormat","codec","crop","bottomRight","x","cropRange","y","topLeft","resolution","height","width","webrtcConfig","clientDescription","TalkingAvatarService_WebRTC_SDP","iceServers","talkingAvatar","background","color","backgroundColor","character","customized","style","onAvatarEvent","metadata","avatarEventReceived","avatarEventArgs","AvatarEventArgs","Data","Offset","Name","IAuthentication_js_1","privAuthInfo","AuthInfo","AuthKey","authFetchEventId","fetchOnExpiry","CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privFetchOnExpiryCallback","privTokenPrefix","QueryParameterNames_js_1","getHostSuffix","region","setCommonUrlParams","endpoint","Map","Speech_SegmentationSilenceTimeoutMs","QueryParameterNames","SegmentationSilenceTimeoutMs","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","Postprocessing","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceResponse_RequestWordLevelTimestamps","EnableWordLevelTimestamps","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","parameterName","propertyId","setUrlParameter","serviceProperties","parse","ServicePropertiesPropertyName","propId","ConversationServiceRecognizer","ServiceRecognizerBase","recognizerConfig","recognizer","handleSpeechPhraseMessage","handleSpeechPhrase","textBody","handleSpeechHypothesisMessage","handleSpeechHypothesis","processTypeSpecificMessages","handleRecognizedCallback","sessionId","handleRecognizingCallback","duration","processSpeechMessages","processed","cancelRecognition","cancellationReason","errorCode","simple","SimpleSpeechPhrase","fromJSON","resultReason","EnumTranslation","implTranslateRecognitionResult","RecognitionStatus","resultProps","PropertyCollection","SpeechServiceResponse_JsonResult","simpleOffset","privRequestSession","currentTurnAudioOffset","onPhraseRecognized","Duration","ResultReason","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","OutputFormatPropertyName","OutputFormat","Simple","SpeechRecognitionResult","DisplayText","Language","LanguageDetectionConfidence","SpeakerId","detailed","DetailedSpeechPhrase","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","hypothesis","SpeechHypothesis","RecognizingSpeech","onHypothesis","Exports_js_3","ConnectionFactoryBase_js_1","Exports_js_4","ConversationTranscriberConnectionFactory","ConnectionFactoryBase","universalUri","create","authInfo","SpeechServiceConnection_Endpoint","SpeechServiceConnection_Region","hostSuffix","SpeechServiceConnection_Host","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","CustomSpeechDeploymentId","autoDetectSourceLanguages","EnableLanguageId","setV2UrlParams","webSocketConnection","WebsocketConnection","WebsocketMessageFormatter","SpeechServiceConnection_Url","ConversationTranscriptionServiceRecognizer","conversationTranscriber","privConversationTranscriber","setSpeakerDiarizationJson","privEnableSpeakerId","phraseDetection","privSpeechContext","getSection","mode","speakerDiarization","audioSessionId","privDiarizationSessionId","audioOffsetMs","setSection","ConversationTranscriptionResult","ConversationTranscriptionEventArgs","transcribing","Success","NBest","Display","transcribed","CancellationErrorCodePropertyName","CancellationErrorCode","canceled","cancelEvent","ConversationTranscriptionCanceledEventArgs","DialogConnectionFactory","applicationId","Conversation_ApplicationId","dialogType","Conversation_DialogType","requestTurnStatus","Conversation_Request_Bot_Status_Messages","Format","RequestBotStatusMessages","BotId","DialogServiceConfig","DialogTypes","CustomCommands","CustomCommandsAppId","resourceInfix","version","BotFramework","BaseUrl","standardizedHost","endsWith","ApiKey","DialogEvents_js_1","AudioOutputFormat_js_1","DialogServiceTurnStateManager_js_1","ActivityResponsePayload_js_1","SpeechConnectionMessage_Internal_js_1","DialogServiceAdapter","dialogServiceConnector","privDialogServiceConnector","receiveMessageOverride","receiveDialogMessageOverride","privTurnStateManager","DialogServiceTurnStateManager","recognizeOverride","recoMode","listenOnce","postConnectImplOverride","connection","dialogConnectImpl","configConnectionOverride","configConnection","disconnectOverride","privDisconnect","privDialogAudioSource","agentConfigSent","privLastResult","connectionEvents","connectionEvent","terminateMessageLoop","sendMessage","interactionGuid","createGuid","agentMessage","interactionId","messagePayload","agentMessageJson","fetchConnection","SpeechConnectionMessage","CancellationReason","NoError","messageType","speechPhrase","TooManyRequests","fireEventForResult","recognized","SpeechRecognitionEventArgs","recognizing","keyword","SpeechKeyword","Status","RecognizedKeyword","resultId","audioRequestId","turn","GetTurn","binaryBody","audioStream","write","endAudioStream","handleResponseMessage","defferal","isRecognizing","onStopRecognizing","properties","SpeechRecognitionCanceledEventArgs","privSuccessCallback","recognitionMode","privErrorCallback","startNewRecognition","listenForServiceTelemetry","Speech_SessionId","conPromise","connectImpl","preAudioPromise","sendPreAudioMessages","node","audioNode","ReplayableAudioNode","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","ConnectionFailure","sessionStartEventArgs","SessionEventArgs","privRecognizer","sessionStarted","sendAudio","RuntimeError","privConnectionLoop","startMessageLoop","communicationCustodian","loop","turnRequestId","StartTurn","onServiceTurnStartResponse","speechStartDetected","SpeechDetected","speechStartEventArgs","RecognitionEventArgs","speechStopDetected","onServiceRecognized","speechStopEventArgs","speechEndDetected","turnEndRequestId","CompleteTurn","sessionStopEventArgs","onServiceTurnEndResponse","isContinuousRecognition","sessionStopped","serviceEvents","ServiceEvent","sendSpeechServiceConfig","serialize","sendAgentConfig","addKeywordContextData","sendSpeechContext","sendAgentContext","sendWaveHeader","agentConfig","botInfo","commandsCulture","SendingAgentContextMessageEvent","agentConfigJson","guid","speechActivityTemplate","Conversation_Speech_Activity_Template","agentContext","channelData","agentContextJson","serviceResult","responseMessage","responsePayload","responseRequestId","activityPayload","ActivityPayloadResponse","conversationId","updateAgentConfig","pullAudioOutputStream","processActivityPayload","AudioOutputFormatImpl","fromSpeechSynthesisOutputFormatString","SpeechServiceConnection_SynthOutputFormat","activity","ActivityReceivedEventArgs","activityReceived","turnStatusReceived","TurnStatusReceivedEventArgs","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","definition","Number","speechContext","clientDetectedKeywords","onReject","action","AudioOutputStream_js_1","manager","privRequestId","privIsCompleted","privAudioStream","privTurnManager","resetTurnEndTimeout","audioFormat","messageDataStreamType","MessageDataStreamType","TextToSpeechAudio","AudioOutputStream","createPullStream","getDefaultOutputFormat","complete","privTimeoutToken","clearTimeout","setTimeout","Error_js_1","DialogServiceTurnState_js_1","privTurnMap","InvalidOperationError","turnState","DialogServiceTurnState","delete","addPhrase","phrase","privPhrases","clearPhrases","addReferenceGrammar","grammar","privGrammars","clearGrammars","generateGrammarObject","retObj","ReferenceGrammars","retPhrases","Groups","Type","Items","recognitionStatus","expectEndOfDictation","RecognizedSpeech","EndOfDictation","BabbleTimeout","BadRequest","Forbidden","EndOfStream","ServiceError","BadRequestParameters","errorDetails","AvatarSynthesisAdapter_js_1","enumerable","SpeechSynthesisAdapter_js_1","SpeechSynthesisAdapter","SpIDAuthKey","ContentType","Path","RequestId","RequestStreamId","RequestTimestamp","privHeaderName","privToken","IntentConnectionFactory","SpeechServiceConnection_IntentRegion","getSpeechRegionFromIntentRegion","intentRegion","IntentServiceRecognizer","privIntentRecognizer","privIntentDataSent","setIntents","addedIntents","umbrellaIntent","privAddedLmIntents","privUmbrellaIntent","speechHypothesis","IntentRecognitionResult","RecognizingIntent","IntentRecognitionEventArgs","sendEvent","privPendingIntentArgs","intentResponse","IntentResponse","topScoringIntent","intent","addedIntent","intentId","RecognizedIntent","LanguageUnderstandingServiceResponse_JsonResult","IntentRecognitionCanceledEventArgs","CustomVoiceDeploymentId","StableTranslation","TestHooks","CtsMeetingId","CtsDeviceId","CtsIsParticipant","EnableAvatar","SpeechRecognitionEvent","PlatformEvent","eventName","EventType","privSessionId","privAudioSourceId","privAudioNodeId","authFetchEventid","privAuthFetchEventid","RecognitionCompletionStatus","privAuthFetchEventId","serviceTag","privStatus","privError","privServiceTag","RecognitionMode","SpeechResultFormat","speechServiceConfig","privSpeechServiceConfig","privParameters","privMaxRetryCount","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","privRecognitionMode","privRecognitionActivityTimeout","Interactive","Recognition","recognitionActivityTimeout","languageIdMode","SpeechServiceConnection_AutoDetectSourceLanguages","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","sourceLanguageModels","models","modelsExist","customProperty","modelId","maxRetryCount","isSpeakerDiarizationEnabled","RecognitionEvents_js_1","ServiceTelemetryListener_Internal_js_1","privDetachables","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecognitionBytesSent","privRecogNumber","privInTurn","privConnectionAttempts","privTurnDeferral","turnCompletionPromise","recogNumber","numConnectionAttempts","bytesSent","recognitionBytesSent","eventSource","privServiceTelemetryListener","attachListener","ServiceTelemetryListener","RecognitionTriggeredEvent","isError","onComplete","ListeningStartedEvent","onPreConnectionStart","ConnectingToServiceEvent","onAuthCompleted","onConnectionEstablishCompleted","RecognitionStartedEvent","continuousRecognition","onSpeechContext","hypothesisReceived","phraseReceived","onAudioSent","onRetryConnection","detachable","getTelemetry","hasTelemetry","onSpeechEnded","detachAudioNode","privActivityResponse","privDetailedSpeechPhrase","baseOffset","firstWordOffset","Words","details","word","DisplayWords","PrimaryLanguage","Confidence","SynthesisStatus","privIntentResponse","query","entities","privSimpleSpeechPhrase","privSpeechStartDetected","privSpeechHypothesis","privSpeechKeyword","MetadataType","SynthesisAudioMetadata","privSynthesisAudioMetadata","Metadata","TranslationStatus_js_1","TranslationHypothesis","privTranslationHypothesis","Translation","TranslationStatus","fromTranslationResponse","translationHypothesis","_this$privTranslation","TranslationPhrase","privTranslationPhrase","translationResponse","SpeechPhrase","_this$privTranslation2","TranslationSynthesisEnd","privSynthesisEnd","FailureReason","TurnStatusResponsePayload","privMessageStatusResponse","privConnectionConfigurationPromise","privConnectionPromise","privSetTimeout","privIsLiveAudio","privAverageBytesPerMs","privExpectContentAssessmentResponse","recognizeSpeaker","sendPrePayloadJSONOverride","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","RequestSession","privServiceEvents","privDynamicGrammar","DynamicGrammarBuilder","SpeechContext","privAgentConfig","WebWorkerLoadType","Worker","Timeout","connectionClosedEvent","setLanguageIdJson","setOutputDetailLevelJson","setTranslationJson","targetLanguages","SpeechServiceConnection_TranslationToLanguages","languages","translationVoice","SpeechServiceConnection_TranslationVoice","onSuccess","output","interimResults","languageToVoiceMap","lang","defaultVoices","setSpeechSegmentationTimeoutJson","speechSegmentationTimeout","Conversation","Dictation","segmentationSilenceTimeoutMs","segmentation","sourceLanguages","speechContextLidMode","Priority","onUnknown","resultType","phraseResults","customModels","onInterim","setWordLevelTimings","Detailed","setDetailedOutputFormat","dynamicGrammar","conversationTranslatorToken","ConversationTranslator_Token","voiceProfileType","SpeechServiceConnection_SpeakerIdMode","auth","recognize","errorCallBack","audioStreamNode","receiveMessage","stopRecognizing","sendFinalAudio","connectAsync","cb","sendNetworkMessage","contentType","activityTemplate","privActivityTemplate","expectContentAssessmentResponse","sendTelemetryData","telemetryData","telemetryDataEnabled","privServiceHasSentMessage","sendPrePayloadJSON","updateSpeakerDiarizationAudioOffset","setSpeakerDiarizationAudioOffsetMs","generateNewRequestId","speechContextJson","toJSON","noOp","retryableConnect","requestSession","SpeechServiceConfigJson","replacement","system","DisableReferenceChannel","MicSpec","configureConnection","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","delay","isUnAuthorized","lastStatusCode","lastReason","authPromise","response","delayMs","writeBufferToConsole","out","readView","Uint8Array","padStart","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","privReceivedMessages","privPhraseLatencies","privHypothesisLatencies","audioReceivedTime","End","Start","privMicStartTime","privConnectionStartTime","Id","ConnectionEstablishErrorEvent","getConnectionError","maxMessagesToSend","metrics","PhraseLatencyMs","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","SpeakerRecognitionConnectionFactoryBase","endpointPath","scenario","scenarioToPath","SpeechServiceConnection_Key","SpeakerServiceRecognizer","privSpeakerRecognizer","privSpeakerAudioSource","recognizeSpeakerOnce","SpeakerRecognitionResult","RecognizedSpeaker","privResultDeferral","privSpeakerModel","extractSpeakerContext","sendSpeakerRecognition","speakerContextJson","features","interimResult","progressiveDetection","profileIds","SpeechConnectionFactory","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","ForceDictationPropertyName","ConnectionMessage","additionalHeaders","privPath","privContentType","privStreamId","privAdditionalHeaders","sectionName","setPronunciationAssessmentParams","contentAssessmentTopic","enrichment","pronunciationAssessment","phraseOutput","contentAssessment","topic","dgi","call","charAt","substring","recognition","os","System","build","platform","SpeechServiceRecognizer","speechRecognizer","privSpeechRecognizer","speechSynthesizer","audioDestination","privSpeechSynthesizer","onSynthesisStarted","synthesisStartEventArgs","SpeechSynthesisEventArgs","SpeechSynthesisResult","SynthesizingAudioStarted","synthesisStarted","onSynthesizing","synthesizing","audioWithHeader","privSynthesisTurn","audioOutputFormat","addHeader","SynthesizingAudio","onSynthesisCancelled","SynthesisCanceled","onSynthesisCompleted","synthesisCompleted","onWordBoundary","wordBoundaryEventArgs","wordBoundary","onVisemeReceived","visemeEventArgs","visemeReceived","onBookmarkReached","bookmarkEventArgs","bookmarkReached","synthesisUri","hostPrefix","avatarEnabled","speakOverride","connectImplOverride","privSessionAudioDestination","SynthesisTurn","SynthesisContext","cancelSynthesisLocal","synthesisContext","privAudioOutputFormat","Speak","isSSML","ssml","buildSsml","startNewSynthesis","sendSynthesisContext","sendSsmlMessage","stopSpeaking","cancelSynthesis","_cancellationReason","isSynthesizing","onStopSynthesizing","_connectionMessage","onServiceResponseMessage","onAudioChunkReceived","metadataList","WordBoundary","SentenceBoundary","onTextBoundaryEvent","SpeechSynthesisWordBoundaryEventArgs","Length","currentTextOffset","currentSentenceOffset","BoundaryType","Bookmark","SpeechSynthesisBookmarkEventArgs","Viseme","onVisemeMetadataReceived","IsLastAnimation","SpeechSynthesisVisemeEventArgs","VisemeId","getAndClearVisemeAnimation","AvatarSignal","SessionEnd","onSessionEnd","constructSynthesisResult","synthesisContextJson","_metadata","_requestId","_audio","_result","_wordBoundaryEventArgs","_visemeEventArgs","_bookmarkEventArgs","synthesisSection","buildSynthesisContext","metadataOptions","bookmarkEnabled","punctuationBoundaryEnabled","SpeechServiceResponse_RequestPunctuationBoundary","sentenceBoundaryEnabled","SpeechServiceResponse_RequestSentenceBoundary","sessionEndEnabled","visemeEnabled","wordBoundaryEnabled","SpeechServiceResponse_RequestWordBoundary","outputFormat","requestAudioFormatString","autoDetection","autoDetectSourceLanguage","SpeechSynthesisEvent","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","audioSessionDestinationId","audioTurnDestinationId","privRestAdapter","RestMessageAdapter","getVoicesList","Get","SynthesisAudioMetadata_js_1","SynthesisEvents_js_1","privIsSynthesizing","privIsSynthesisEnded","privBytesReceived","privTextOffset","privNextSearchTextIndex","privSentenceOffset","privNextSearchSentenceIndex","isSynthesisEnded","bytesReceived","audioDuration","privAudioDuration","extraProperties","privWebRTCSDP","getAllReceivedAudio","privReceivedAudio","readAllAudioFromStream","getAllReceivedAudioWithHeader","privReceivedAudioWithHeader","hasHeader","rawText","privRawText","privIsSSML","privAudioOutputStream","PullAudioOutputStreamImpl","privPartialVisemeAnimation","privTurnAudioDestination","SynthesisTriggeredEvent","ConnectingToSynthesisServiceEvent","SynthesisStartedEvent","responseJson","webrtc","connectionString","updateTextOffset","AnimationChunk","audioBuffer","SynthesizingAudioCompleted","animation","isXmlTag","withinXmlTag","idx","SynthesisServiceType","privSynthesisServiceType","Standard","synthesisServiceType","synthesis","TranscriberConnectionFactory","multiaudioRelativeUri","hostDefault","setQueryParams","endpointUrl","wordLevelTimings","RestConfigBase_js_1","ConversationConnectionConfig","privHost","privApiVersion","privClientAppId","defaultLanguageCode","privDefaultLanguageCode","restPath","privRestPath","webSocketPath","privWebSocketPath","transcriptionEventKeys","privTranscriptionEventKeys","ConversationConnectionConfig_js_1","ConversationWebsocketMessageFormatter_js_1","ConversationConnectionFactory","endpointHost","ConversationTranslator_Host","ConversationTranslator_CorrelationId","ConversationWebsocketMessageFormatter","ConversationConnectionMessage","privConversationMessageType","conversationMessageType","privRequestParams","privErrors","createOrJoin","conversationCode","ConversationTranslator_Name","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","errMessageRaw","errorMessage","replace","conversation","leave","privRequestCompletionDeferral","completionPromise","ConversationConnectionMessage_js_1","ConversationRequestSession_js_1","ConversationTranslatorEventArgs_js_1","ConversationTranslatorInterfaces_js_1","ConversationServiceAdapter","conversationServiceConnector","privConnectionConfigPromise","privLastPartialUtteranceId","privConversationServiceConnector","privConversationAuthentication","receiveConversationMessageOverride","conversationConnectImpl","privConversationRequestSession","ConversationRequestSession","privConversationConnectionFactory","privConversationIsDisposed","sendMessageAsync","ConversationTranslationCanceledEventArgs","sendFinal","commandPayload","CommandResponsePayload","command","participantsPayload","ParticipantsListPayloadResponse","participantsResult","participants","p","avatar","displayName","participantId","isHost","ishost","isMuted","ismuted","isUsingTts","usetts","preferredLanguage","locale","participantsListReceived","ParticipantsListEventArgs","roomid","translateTo","profanityFilter","roomProfanityFilter","roomLocked","muteAll","participantUpdateCommandReceived","ParticipantAttributeEventArgs","ConversationTranslatorCommandTypes","setTranslateToLanguages","setProfanityFiltering","setMute","muteAllCommandReceived","MuteAllEventArgs","conversationExpiration","ConversationExpirationEventArgs","setUseTTS","lockRoomCommandReceived","LockRoomEventArgs","changeNickname","joinParticipantPayload","ParticipantPayloadResponse","joiningParticipant","participantJoinCommandReceived","ParticipantEventArgs","leavingParticipant","participantLeaveCommandReceived","authorizationToken","onToken","speechPayload","SpeechResponsePayload","conversationResultReason","TranslatedParticipantSpeech","TranslatingParticipantSpeech","speechResult","ConversationTranslationResult","getTranslations","translations","isFinal","translationReceived","ConversationReceivedTranslationEventArgs","ConversationTranslatorMessageTypes","final","partial","textPayload","TextResponsePayload","textResult","originalText","instantMessage","messageRetrievalPromise","serviceResultTranslations","Translations","translation","StringUtils_js_1","ConversationTranslatorConnectionFactory","convGetter","privConvGetter","isVirtMicArrayEndpoint","convInfo","room","cognitiveSpeechRegion","replacementValues","CTS_VIRT_MIC_PATH","StringUtils","formatString","parsedUrl","searchParams","connFactory","TranslationConnectionFactory","getEndpointUrl","privIsMuted","isLocked","privIsLocked","participant","privParticipant","privKey","privValue","privParticipantId","isRoomLocked","isMuteAll","privRoomId","privSessionToken","privTranslateTo","privProfanityFilter","privRoomProfanityFilter","privIsRoomLocked","privParticipants","privIsMuteAll","privPayload","privCommand","meId","addOrUpdateParticipant","exists","getParticipantIndex","splice","getParticipant","findIndex","find","deleteParticipant","filter","me","keepAlive","participantCommand","translatedMessage","disconnectSession","ejectParticipant","instant_message","joinSession","leaveSession","participantList","roomExpirationWarning","setLockState","setMuteAll","ConversationConnectionFactory_js_1","ConversationServiceAdapter_js_1","fromConfig","speechConfig","audioConfig","ConversationTranslatorRecognizer","Recognizer","serviceConfigImpl","throwIfNull","conversationImpl","privConversation","privProperties","clone","privConnection","Connection","fromRecognizer","privClearTimeout","connected","disconnected","speechRecognitionLanguage","privSpeechRecognitionLanguage","throwIfDisposed","privReco","resetConversationTimeout","closeConnection","disposing","createRecognizerConfig","RecognizerConfig","createServiceRecognizer","PromiseToEmptyCallback","getKeepAlive","deferral","incomingMessage","textContent","binaryContent","ConversationManager_js_1","ConversationManager","ConversationTranslatorRecognizer_js_1","ConversationRecognizerFactory","TranscriberRecognizer_js_1","TranscriberRecognizer","InternalParticipants","privCommandResponse","parseCommandResponse","CommandResponsePayload_js_1","ParticipantResponsePayload_js_1","TranslationResponsePayload_js_1","privParticipantsPayloadResponse","parseListResponse","privParticipantPayloadResponse","parseParticipantResponse","privSpeechResponse","parseSpeechResponse","timestamp","privTextResponse","parseTextResponse","speechTranslationConfig","speechTranslationConfigImpl","audioConfigImpl","privDisposedRecognizer","isMeetingRecognizer","getConversationInfo","conversationInfo","meeting","m","privMeeting","getMeetingInfo","meetingInfo","IsMeetingRecognizer","startContinuousRecognitionAsync","marshalPromiseToCallbacks","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","pushConversationEvent","reco","sendSpeechEventAsync","pushMeetingEvent","sendMeetingSpeechEventAsync","enforceAudioGating","connectMeetingCallbacks","transcriber","s","disconnectCallbacks","implRecognizerStop","configImpl","TranscriptionServiceRecognizer","privTranscriberRecognizer","sendTranscriptionStartJSON","sendSpeechEvent","createSpeechEventPayload","createMeetingSpeechEventPayload","MeetingTranscriptionCanceledEventArgs","speechEventJson","eventDict","conversationProperties","attendees","meetingProperties","returnRegionPlaceholder","from","to","SpeechServiceResponse_TranslationRequestStablePartialResult","voice","TranslationServiceRecognizer","translationRecognizer","privTranslationRecognizer","onConnection","handleTranslationPhrase","translatedPhrase","TranslationRecognitionResult","TranslationRecognitionEventArgs","handleTranslationHypothesis","resultProperties","sendSynthesisAudio","synthEnd","TranslationSynthesisResult","retEvent","TranslationSynthesisEventArgs","canceledResult","TranslationRecognitionCanceledEventArgs","fromSpeechRecognitionResult","confidence","TranslatedSpeech","TranslatingSpeech","VoiceServiceRecognizer","privDeferralMap","DeferralMap","SpeakerAudioSource","operation","handleCreateResponse","handleResultResponse","enrollmentResponse","handleFetchResponse","phraseResponse","handlePhrasesResponse","VoiceProfileEnrollmentResult","enrollmentReasonFrom","enrollment","enrollmentStatus","getId","createProfile","profileType","createProfileDeferral","sendCreateProfile","resetProfile","profile","sendCommonRequest","deleteProfile","retrieveEnrollmentResult","privExpectedProfileId","profileId","getAllProfiles","getActivationPhrases","getPhrasesDeferral","sendPhrasesRequest","enrollProfile","enrollmentDeferral","sendBaseRequest","scenarioFrom","profileCreateRequest","number","VoiceProfileType","TextIndependentIdentification","TextIndependentVerification","profileRequest","maxPageSize","VoiceProfilePhraseResult","passPhraseType","phrases","EnrollingVoiceProfile","profiles","successReason","DeletedVoiceProfile","ResetVoiceProfile","VoiceProfileResult","profileInfo","iProfiles","profileResults","EnrolledVoiceProfile","textMessage","headerBodySplit","parseHeaders","binaryMessage","dataView","headerLength","getInt16","headersString","getInt8","makeHeaders","content","headerBuffer","stringToArrayBuffer","headerInt8Array","Int8Array","payloadInt8Array","bodyInt8Array","headerMatches","match","separatorIndex","substr","str","setUint8","charCodeAt","PlatformEvent_js_1","AudioSourceEvent","AudioStreamNodeEvent","Stream","targetChunkSize","privTargetChunkSize","privNextBufferReadyBytes","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","bytesToCopy","min","targetView","sourceView","jsonstring","privJsonResult","jsonString","ConnectionEvent","privReason","privStatusCode","privMessage","privType","statuscode","networkReceivedTimeISO","privNetworkReceivedTime","networkSentTimeISO","privNetworkSentTime","networkSentTime","Guid_js_1","privBody","privMessageType","privSize","privMap","DialogEvent","argumentName","ObjectDisposedError","objectName","privEventListeners","privConsoleListener","privMetadata","eventId","onEventCallback","listener","attachConsoleListener","EventSource_js_1","setEventSource","privInstance","uuid_1","v4","RegExp","List","list","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","privList","item","itemIndex","first","last","insertAt","unshift","triggerSubscriptions","removeFirst","removeAt","removeLast","remove","count","removedElements","clear","onAdded","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","toArray","cloneCopy","any","where","all","select","selectList","filteredList","orderBy","compareFn","orderedArray","sort","orderByDesc","a","b","concatArray","array","subscriptions","OCSPEvent","signature","privSignature","serialNumber","expireTime","privExpireTime","startTime","privStartTime","privExpireTimeString","toLocaleDateString","privStartTimeString","toLocaleTimeString","privName","privEventId","privEventTime","privEventType","PromiseState","PromiseResult","promiseResultEventSource","throwIfError","on","privIsError","privResult","isCompleted","PromiseResultEventSource","setResult","privOnSetResult","setError","privOnSetError","onSetResult","onSetError","privResolve","privReject","privPromise","privState","privPromiseResult","privPromiseResultEvents","privSuccessHandlers","privErrorHandlers","Resolved","executeSuccessCallback","detachHandlers","Rejected","errorHandler","executeErrorCallback","List_js_1","Promise_js_1","SubscriberType","privPromiseStore","privIsDrainInProgress","privIsDisposing","privSubscribers","drain","enqueue","throwIfDispose","deferredSubscriber","Dequeue","peek","Peek","pendingItemProcessor","subs","promiseArray","wrapper","finally","lists","subscriber","dequeuedItem","ConnectionMessage_js_1","getPrototypeOf","actualSampleRate","desiredSampleRate","privActualSampleRate","privDesiredSampleRate","actualAudioFrame","audioFrame","downSampleAudioFrame","audioLength","floatTo16BitPCM","setString","input","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","Queue_js_1","privIsWriteEnded","privIsReadEnded","privReaderQueue","isReadEnded","streamChunk","throwIfClosed","replacements","formatted","appendToFormatted","appendToKey","appendFunc","load","scheduledTimeoutFunctions","unhandledRequests","workerUrl","worker","addEventListener","_ref","isCallNotification","timerId","idOrFunc","unhandledTimerId","isClearResponse","random","postMessage","func","performance","loadWorkerTimers","workerTimers","timers","privActivity","AudioFileWriter_js_1","AudioInputStream_js_1","AudioConfig","fromDefaultMicrophoneInput","pcmRecorder","PcmRecorder","AudioConfigImpl","fromMicrophoneInput","fromWavFileInput","FileAudioSource","fromStreamInput","PullAudioInputStreamCallback","PullAudioInputStreamImpl","AudioInputStream","MediaStream","fromDefaultSpeakerOutput","AudioOutputConfigImpl","SpeakerAudioDestination","fromSpeakerOutput","player","fromAudioFileOutput","AudioFileWriter","fromStreamOutput","PushAudioOutputStreamCallback","PushAudioOutputStreamImpl","PushAudioOutputStream","PullAudioOutputStream","def","privDestination","privFd","throwIfNotUndefined","privAudioFormat","headerOffset","privWriteStream","createWriteStream","fd","start","autoClose","updateHeader","bytesWritten","writeSync","closeSync","end","createPushStream","PushAudioInputStream","PullAudioInputStream","PushAudioInputStreamImpl","privFormat","privStream","dataBuffer","toBuffer","buf","alloc","privCallback","privIsClosed","privBufferSize","transmitBuff","totalBytes","readBuff","pulledBytes","SpeechSynthesisOutputFormat_js_1","formatTag","blockAlign","audioFormatString","priAudioFormatString","priRequestAudioFormatString","priHasHeader","fromSpeechSynthesisOutputFormat","speechSynthesisOutputFormat","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","AudioFormatTag","MuLaw","Siren","MP3","SILKSkype","PCM","OGG_OPUS","WEBM_OPUS","OPUS","FLAC","ALaw","privHeader","setUint32","tmp","SpeechSynthesisOutputFormat","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","Raw22050Hz16BitMonoPcm","Riff22050Hz16BitMonoPcm","Raw44100Hz16BitMonoPcm","Riff44100Hz16BitMonoPcm","intView","privLastChunkView","tmpBuffer","getWaveFormat","samplesPerSecond","isWavFormat","setUint16","AudioContext","webkitAudioContext","getSupportedConstraints","audioContext","gainNode","autoUpdateBufferTimer","init","playAudioSample","newAudioData","ensureInitializedContext","audioData","formatAudioData","newSamplesData","samples","stopAudio","clearInterval","timerPeriod","setInterval","updateAudioBuffer","createGain","gain","currentTime","formatArrayBuffer","Int16Array","Int32Array","maxValue","float32Data","bufferSource","createBufferSource","frameCount","createBuffer","channel","channelOffset","playAudio","decodeAudioData","newBuffer","AudioFormatToMimeType","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privIsPaused","privAudioBuffer","updateSourceBuffer","privSourceBuffer","handleSourceBufferUpdateEnd","receivedAudio","audioBlob","privAudio","src","notifyPlayback","onAudioEnd","mimeType","MediaSource","isTypeSupported","Audio","privMediaSource","onsourceopen","addSourceBuffer","onupdate","onupdateend","onupdatestart","volume","_this$privAudio$volum","_this$privAudio","mute","muted","unmute","pause","play","internalAudio","sourceBufferAvailable","binary","appendBuffer","canEndStream","endOfStream","onAudioStart","onended","updating","LanguageIdMode_js_1","AutoDetectSourceLanguageConfig","LanguageIdMode","AtStart","fromOpenRange","AutoDetectSourceLanguagesOpenRangeOptionName","fromLanguages","throwIfArrayEmptyOrWhitespace","fromSourceLanguageConfigs","configs","autoConfig","langs","Continuous","AutoDetectSourceLanguageResult","languageDetectionConfidence","privLanguage","privLanguageDetectionConfidence","fromResult","fromConversationTranscriptionResult","privCustomized","AvatarVideoFormat","privBackgroundColor","AvatarEventTypes","audioOffset","description","privOffset","privDescription","SpeechSynthesisConnectionFactory_js_1","Synthesizer_js_1","AvatarSynthesizer","Synthesizer","SpeechSynthesisConnectionFactory","implCommonSynthesizeSetup","privAdapter","startAvatarAsync","peerConnection","privIceServers","getConfiguration","iceGatheringDone","onicegatheringstatechange","iceGatheringState","onicecandidate","candidate","sdp","createOffer","setLocalDescription","localDescription","speak","SynthesisResult","sdpAnswerString","atob","sdpAnswer","RTCSessionDescription","setRemoteDescription","speakTextAsync","r","speakSsmlAsync","stopSpeakingAsync","synthesisRequestQueue","stopAvatarAsync","privDisposed","createSynthesisAdapter","createRestSynthesisAdapter","_authentication","_synthesizerConfig","createSynthesizerConfig","deferredResult","SynthesisRequest","privSynthesizing","adapterSpeak","setCropRange","AvatarWebRTCConnectionResult","SDPAnswer","privSDPAnswer","DialogServiceConfig_js_1","BotFrameworkConfig","DialogServiceConfigImpl","fromSubscription","subscription","botId","botFrameworkConfig","fromAuthorizationToken","fromHost","resolvedHost","fromEndpoint","CancellationDetailsBase_js_1","CancellationDetails","CancellationDetailsBase","RecognitionResult","simpleSpeech","privErrorDetails","privErrorCode","ErrorCode","CancellationEventArgsBase","recoBase","internalData","ret","privInternalData","setupEvents","fromSynthesizer","synthesizer","synthBase","openConnection","setMessageProperty","propertyName","propertyValue","success","privEventListener","ConnectionEventArgs","messageSent","ConnectionMessageEventArgs","ConnectionMessageImpl","messageReceived","privServiceEventListener","receivedServiceMessage","ServiceEventArgs","PropertyCollection_js_1","PropertyId_js_1","privConnectionMessage","isTextMessage","isBinaryMessage","TextMessage","param","throwIfNullOrTooLong","maxLength","throwIfNullOrTooShort","minLength","throwIfFileDoesNotExist","CancellationEventArgsBase_js_1","CustomCommandsConfig","customCommandsConfig","Diagnostics","SetLoggingLevel","logLevel","privListener","ConsoleLoggingListener","StartConsoleOutput","StopConsoleOutput","SetLogOutputPath","privSpeechConfig","SpeechConfigImpl","setProxy","setServiceProperty","DialogConnectorFactory_js_1","DialogServiceConnector","dialogConfig","dialogServiceConfigImpl","isTurnComplete","buildAgentConfig","listenOnceAsync","retPromise","callbackHolder","sendActivityAsync","errCb","commType","Conversation_Agent_Connection_Id","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","AudioConfig_js_1","CancellationReason_js_1","PullAudioInputStreamCallback_js_1","PushAudioOutputStreamCallback_js_1","KeywordRecognitionModel_js_1","KeywordRecognitionModel","SessionEventArgs_js_1","RecognitionEventArgs_js_1","OutputFormat_js_1","IntentRecognitionEventArgs_js_1","RecognitionResult_js_1","SpeechRecognitionResult_js_1","IntentRecognitionResult_js_1","LanguageUnderstandingModel_js_1","LanguageUnderstandingModel","SpeechRecognitionEventArgs_js_1","MeetingTranscriptionEventArgs","SpeechRecognitionCanceledEventArgs_js_1","TranslationRecognitionEventArgs_js_1","TranslationSynthesisEventArgs_js_1","TranslationRecognitionResult_js_1","TranslationSynthesisResult_js_1","ResultReason_js_1","SpeechConfig_js_1","SpeechConfig","SpeechTranslationConfig_js_1","SpeechTranslationConfig","SpeechTranslationConfigImpl","Recognizer_js_1","SpeechRecognizer_js_1","SpeechRecognizer","IntentRecognizer_js_1","IntentRecognizer","VoiceProfileType_js_1","TranslationRecognizer_js_1","TranslationRecognizer","Translations_js_1","NoMatchReason_js_1","NoMatchReason","NoMatchDetails_js_1","NoMatchDetails","TranslationRecognitionCanceledEventArgs_js_1","IntentRecognitionCanceledEventArgs_js_1","CancellationDetails_js_1","CancellationErrorCodes_js_1","ConnectionEventArgs_js_1","ServiceEventArgs_js_1","Connection_js_1","PhraseListGrammar_js_1","PhraseListGrammar","BotFrameworkConfig_js_1","CustomCommandsConfig_js_1","DialogServiceConnector_js_1","ActivityReceivedEventArgs_js_1","TurnStatusReceivedEventArgs_js_1","ServicePropertyChannel_js_1","ServicePropertyChannel","ProfanityOption_js_1","ProfanityOption","BaseAudioPlayer_js_1","BaseAudioPlayer","ConnectionMessageEventArgs_js_1","VoiceProfile_js_1","VoiceProfile","VoiceProfileEnrollmentResult_js_1","VoiceProfileEnrollmentCancellationDetails","VoiceProfileResult_js_1","VoiceProfileCancellationDetails","VoiceProfilePhraseResult_js_1","VoiceProfileClient_js_1","VoiceProfileClient","SpeakerRecognizer_js_1","SpeakerRecognizer","SpeakerIdentificationModel_js_1","SpeakerIdentificationModel","SpeakerVerificationModel_js_1","SpeakerVerificationModel","AutoDetectSourceLanguageConfig_js_1","AutoDetectSourceLanguageResult_js_1","SourceLanguageConfig_js_1","SourceLanguageConfig","SpeakerRecognitionResult_js_1","SpeakerRecognitionResultType","SpeakerRecognitionCancellationDetails","ConversationParticipantsChangedEventArgs","ConversationTranslationEventArgs","ConversationTranslator","ConversationTranscriber","Meeting","MeetingTranscriber","Participant","ParticipantChangedReason","User","SpeechSynthesizer_js_1","SpeechSynthesizer","SynthesisResult_js_1","SpeechSynthesisResult_js_1","SpeechSynthesisEventArgs_js_1","SpeechSynthesisWordBoundaryEventArgs_js_1","SpeechSynthesisBookmarkEventArgs_js_1","SpeechSynthesisVisemeEventArgs_js_1","SpeechSynthesisBoundaryType_js_1","SpeechSynthesisBoundaryType","SynthesisVoicesResult_js_1","SynthesisVoicesResult","VoiceInfo_js_1","VoiceInfo","SpeakerAudioDestination_js_1","ConversationTranscriptionCanceledEventArgs_js_1","MeetingTranscriptionCanceledEventArgs_js_1","PronunciationAssessmentGradingSystem_js_1","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity_js_1","PronunciationAssessmentGranularity","PronunciationAssessmentConfig_js_1","PronunciationAssessmentConfig","PronunciationAssessmentResult_js_1","PronunciationAssessmentResult","AvatarConfig_js_1","AvatarConfig","AvatarEventArgs_js_1","AvatarSynthesizer_js_1","AvatarVideoFormat_js_1","Coordinate","AvatarWebRTCConnectionResult_js_1","Diagnostics_js_1","privIntentId","privAddedIntents","privDisposedIntentRecognizer","recognizeOnceAsync","buildSpeechContext","Intent","recognizeOnceAsyncImpl","startKeywordRecognitionAsync","stopKeywordRecognitionAsync","addIntent","simplePhrase","addIntentWithLanguageModel","appId","AddedLmIntent","addAllIntents","errorCb","audioImpl","refGrammers","addedLmIntent","grammer","provider","fromFile","fileName","fromStream","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","lastSegment","fromAppId","NotRecognized","InitialBabbleTimeout","recogBase","privGrammerBuilder","addPhrases","referenceText","gradingSystem","FivePoint","granularity","Phoneme","enableMiscue","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","PronunciationAssessment_Json","updateJson","PronunciationAssessment_Params","applyTo","privContentAssessmentTopic","phonemeAlphabet","privPhonemeAlphabet","enableMiscueString","nbestPhonemeCount","privNBestPhonemeCount","enableProsodyAssessment","privEnableProsodyAssessment","enableContentAssessmentWithTopic","paramsJson","dimension","ContentAssessmentResult","detailResult","privPronJson","grammarScore","ContentAssessment","GrammarScore","vocabularyScore","VocabularyScore","topicScore","TopicScore","accuracyScore","_this$detailResult$Pr","PronunciationAssessment","AccuracyScore","pronunciationScore","_this$detailResult$Pr2","PronScore","completenessScore","_this$detailResult$Pr3","CompletenessScore","fluencyScore","_this$detailResult$Pr4","FluencyScore","prosodyScore","_this$detailResult$Pr5","ProsodyScore","contentAssessmentResult","privKeys","privValues","keyToUse","n","clonedMap","mergeTo","destinationCollection","privResultId","privText","privDuration","privJson","implCommonRecognizerSetup","telemetryEnabled","enableTelemetry","enabled","osPlatform","osName","osVersion","userAgent","appVersion","OS","getAuthFromProperties","CognitiveSubscriptionKeyAuthentication","privEventName","privEndpointId","fromLanguage","privVoiceProfiles","privProfileIds","fromProfiles","voiceProfileIds","Identify","Verify","privProfileId","identificationResult","identifiedProfile","privScore","score","RecognizedSpeakers","verificationResult","recognitionResult","SpeakerRecognitionConnectionFactory","privAudioConfigImpl","privDisposedSpeakerRecognizer","recognizeSpeakerOnceAsyncImpl","privVoiceProfile","fromProfile","voiceProfile","TextDependentVerification","speechImpl","href","hostName","endPoint","currentProperties","setProfanity","enableAudioLogging","requestWordLevelTimestamps","enableDictation","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","speakerId","privSpeakerId","speechConfigImpl","FromConfig","autoDetectSourceLanguageConfig","privAudioOffset","privAudioData","visemeId","privVisemeId","privAnimation","wordLength","textOffset","boundaryType","privWordLength","privBoundaryType","speakImpl","getVoicesAsync","getVoices","SynthesisRestAdapter","IsSsml","dataStream","Locale","privSpeechProperties","addTargetLanguage","includes","voiceName","VoicesListRetrieved","privVoices","voices","languageToDefaultVoice","XMLEncode","SynthesizerConfig","createConversationAsync","arg2","arg3","arg4","ConversationImpl","onConnected","privIsConnected","_this$privConversatio","privConversationTranslator","onDisconnected","_this$privConversatio2","onCanceled","_this$privConversatio3","onParticipantUpdateCommandReceived","updatedParticipant","translateToLanguages","participantsChanged","Updated","toParticipant","onLockRoomCommandReceived","onMuteAllCommandReceived","toParticipants","onParticipantJoinCommandReceived","newParticipant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","LeftConversation","onTranslationReceived","textMessageReceived","onParticipantsListReceived","privRoom","privIsReady","_this$privConversatio4","changeNicknameAsync","onConversationExpiration","privConversationId","privManager","Masked","hostNickname","privConfig","privTextMessageMaxLength","privConversationRecognizer","isMutedByHost","_this$privParticipant","_this$privParticipant2","isConnected","transcriberRecognizer","convId","part","props","canSend","_this$privParticipant3","canSendAsHost","_this$privParticipant4","conversationTranslator","handleError","handleCallback","startConversationAsync","addParticipantAsync","addParticipantImplAsync","joinConversationAsync","cognitiveSpeechAuthToken","deleteConversationAsync","deleteConversationImplAsync","endConversationAsync","endConversationImplAsync","lockConversationAsync","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","userId","getMuteCommand","removeParticipantAsync","removeParticipantImplAsync","getEjectCommand","unlockConversationAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","sendTextMessageAsync","getMessageCommand","setTranslatedLanguagesAsync","getSetTranslateToLanguagesCommand","getChangeNicknameCommand","connectTranscriberRecognizer","_this$privConversatio5","includeHost","privAudioConfig","expirationTime","privExpirationTime","startTranscribingAsync","stopTranscribingAsync","originalLanguage","privOrigLang","originalLang","ConversationTranslatorConnectionFactory_js_1","Conversation_js_1","SpeechState","ConversationTranslationRecognizer","translator","privSpeechState","Inactive","privTranslator","tr","_e$result","cancelSpeech","fireCancelEvent","newState","onCancelSpeech","_this$privReco","ConversationCommon","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","canSpeak","privCTRecognizer","param1","param2","param3","privSpeechTranslationConfig","propertyIdsToCopy","UriQueryParameter","leaveConversationAsync","connectTranslatorRecognizer","startContinuousRecognition","_this$privCTRecognize","ConversationCommon_js_1","ConversationExpirationEventArgs_js_1","ConversationParticipantsChangedEventArgs_js_1","ConversationTranslationCanceledEventArgs_js_1","ConversationTranslationEventArgs_js_1","ConversationTranslationResult_js_1","ConversationTranslator_js_1","ConversationTranscriber_js_1","IParticipant_js_1","ParticipantChangedReason_js_1","Meeting_js_1","MeetingImpl","MeetingTranscriber_js_1","ConversationTranscriptionResult_js_1","privUserId","privAvatar","privDisplayName","privIsHost","privIsUsingTts","privPreferredLanguage","privVoice","From","createMeetingAsync","meetingId","meetingImpl","startMeetingAsync","joinMeetingAsync","deleteMeetingAsync","deleteMeetingImplAsync","endMeetingAsync","endMeetingImplAsync","lockMeetingAsync","unlockMeetingAsync","leaveMeetingAsync","sessionid","privCancelReason","privTranslations","privDisposedTranslationRecognizer","removeTargetLanguage","updateLanguages","conn","TurnStatusPayload_js_1","turnStatus","privTurnStatus","SynthesisVoiceGender","SynthesisVoiceType","GENDER_LOOKUP","Neutral","Male","Female","privStyleList","privLocale","privShortName","ShortName","privLocaleName","LocaleName","DisplayName","privLocalName","LocalName","privVoiceType","VoiceType","OnlineStandard","OnlineNeural","privGender","Gender","StyleList","privSampleRateHertz","SampleRateHertz","ExtendedPropertyMap","privExtendedPropertyMap","privWordsPerMinute","WordsPerMinute","SecondaryLocaleList","privSecondaryLocaleList","RolePlayList","privRolePlayList","shortName","localName","localeName","gender","voiceType","styleList","sampleRateHertz","extendedPropertyMap","wordsPerMinute","secondaryLocaleList","rolePlayList","privProfileType","VoiceProfileConnectionFactory","privVoiceAdapter","privDisposedVoiceAdapter","createProfileAsync","retrieveEnrollmentResultAsync","getAllProfilesAsync","getActivationPhrasesAsync","enrollProfileAsync","deleteProfileAsync","resetProfileAsync","getResult","privDetails","enrollmentsCount","enrollmentsLength","enrollmentResultDetails","FromIdentificationProfileList","results","getIdentificationDetails","FromVerificationProfileList","getVerificationDetails","parseFloat","audioSpeechLength","enrollmentsSpeechLength","identificationProfileId","remainingEnrollmentsSpeechLength","verificationProfileId","remainingEnrollmentsCount","remainingEnrollments","phraseArray"],"sourceRoot":""}