{"version":3,"file":"static/js/835.cebf3f8e.chunk.js","mappings":"2KA2EO,MAAMA,EAAaC,IAAiC,IAAhC,QAAEC,EAAO,KAAEC,EAAO,QAAQF,EACnD,MAAMG,EACI,CACNC,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,QAAS,YACTC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,OACRC,aAAc,OACdC,SAAU,OACVC,WAAY,OACZC,OAAQ,UACRC,UAAW,4BACXC,WAAY,gBACZC,WAAY,mCAfVd,EAiBQ,CACVK,gBAAiB,UACjBO,UAAW,8BAIRG,EAAOC,GAAYC,EAAAA,UAAe,GAqBzC,OACEC,EAAAA,EAAAA,KAAA,UACEC,MAAO,IACFnB,KACCe,EAAQf,EAAoB,CAAC,GAEnCF,QAxBgBsB,KAEdtB,EACFA,IAGgB,WAATC,GAAqBsB,OAAOC,cACnCD,OAAOC,gBAGAD,OAAOE,WACdF,OAAOE,aAGPC,QAAQC,KAAK,2DACf,EAUEC,aAAcA,IAAMV,GAAS,GAC7BW,aAAcA,IAAMX,GAAS,GAAOY,SAEnC7B,GACM,EAIb,G","sources":["modules/evaDBE.js"],"sourcesContent":["// async function start(animationManager, settings, container, toast, ui) {\n//     console.log('Calling evaDBE start!');\n\n//     if (ui && typeof ui.setScreen === 'function') {\n//         let current = 1; // Start at screen 1\n//         const maxScreen = 5; // Set your actual number of screens here\n\n//         // Directly set the first screen\n//         ui.setScreen(current);\n\n//         // Use a recursive function to progress screens\n//         const progressScreens = () => {\n//             console.log('In progress screens!')\n//             current += 1;\n//             if (current > maxScreen) {\n//                 return;\n//             }\n//             ui.setScreen(current); // Move to the next screen\n//             setTimeout(progressScreens, 10000); // Recursively call the function after 3 seconds\n//         };\n\n//         // Start the screen progression\n//         setTimeout(progressScreens, 10000); // Start after 3 seconds\n//     }\n// }\n\n// function stop() {\n//     console.log('Calling evaDBE stop!');\n// }\n\n// export { start, stop };\n//Updating to work with just button instead of timing \n// async function start(animationManager, settings, container, toast, ui) {\n//     console.log('Calling evaDBE start!');\n\n//     if (ui && typeof ui.setScreen === 'function') {\n//         let current = 1; // Start at screen 1\n//         const maxScreen = 5; // Set your actual number of screens here\n\n//         // Directly set the first screen\n//         ui.setScreen(current);\n        \n//         // Set up a function that can be called when the Next button is clicked\n//         window.nextScreen = () => {\n//             current += 1;\n//             if (current <= maxScreen) {\n//                 console.log('Moving to screen', current);\n//                 ui.setScreen(current);\n//             } else {\n//                 console.log('Reached the last screen');\n//                 // Optionally handle end of screens\n//             }\n//         };\n        \n//         // Make this function available to your NextButton component\n//         // You'll need to call this from your NextButton click handler\n//         window.finishScreens = () => {\n//             console.log('Screens finished');\n//             // Handle any cleanup or final actions here\n//         };\n//     }\n// }\n\n// function stop() {\n//     console.log('Calling evaDBE stop!');\n//     // Clean up global functions\n//     if (window.nextScreen) delete window.nextScreen;\n//     if (window.finishScreens) delete window.finishScreens;\n// }\n\n// export { start, stop };\n\n//updating for Hamburger Menu:\nimport React from 'react';\n\nexport const NextButton = ({ onClick, text = 'Next' }) => {\n  const styles = {\n    button: {\n      position: 'absolute',\n      bottom: '30px',\n      right: '30px',\n      padding: '12px 25px',\n      backgroundColor: '#4a90e2',\n      color: 'white',\n      border: 'none',\n      borderRadius: '25px',\n      fontSize: '16px',\n      fontWeight: 'bold',\n      cursor: 'pointer',\n      boxShadow: '0 2px 5px rgba(0,0,0,0.2)',\n      transition: 'all 0.3s ease',\n      fontFamily: '\"Times New Roman\", Times, serif'\n    },\n    hoverStyle: {\n      backgroundColor: '#3a80d2',\n      boxShadow: '0 4px 8px rgba(0,0,0,0.3)'\n    }\n  };\n\n  const [hover, setHover] = React.useState(false);\n\n  // Handle the button click\n  const handleClick = () => {\n    // Call the provided onClick function if provided\n    if (onClick) {\n      onClick();\n    } \n    // If this is the \"Finish\" button, call the finishScreens function\n    else if (text === 'Finish' && window.finishScreens) {\n      window.finishScreens();\n    }\n    // Otherwise use the nextScreen function\n    else if (window.nextScreen) {\n      window.nextScreen();\n    }\n    else {\n      console.warn('No click handler or global nextScreen function available');\n    }\n  };\n\n  return (\n    <button\n      style={{\n        ...styles.button,\n        ...(hover ? styles.hoverStyle : {})\n      }}\n      onClick={handleClick}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default NextButton;\n\n"],"names":["NextButton","_ref","onClick","text","styles","position","bottom","right","padding","backgroundColor","color","border","borderRadius","fontSize","fontWeight","cursor","boxShadow","transition","fontFamily","hover","setHover","React","_jsx","style","handleClick","window","finishScreens","nextScreen","console","warn","onMouseEnter","onMouseLeave","children"],"sourceRoot":""}